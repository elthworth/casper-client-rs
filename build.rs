fn main() {
    #[cfg(feature = "ffi")]
    {
        use std::{env, fs::canonicalize, process::Command};

        use cbindgen::{Builder, Language};

        let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
        Builder::new()
            .with_crate(crate_dir.clone())
            .with_language(Language::C)
            .with_autogen_warning("/* WARNING: this file is autogenerated by cbindgen. Don't modify this manually. */")
            .with_include_guard("__CASPER_CLIENT_H__")
            .with_no_includes()
            .with_sys_include("stdint.h") // add sys headers explicitly
            .with_sys_include("stdbool.h")
            .include_item("casper_deploy_params_t") // individual exported struct definitions need to be explicitly included
            .include_item("casper_payment_params_t")
            .include_item("casper_session_params_t")
            .generate()
            .expect("Unable to generate bindings")
            .write_to_file("headers/casper_client.h");

        let base_path = canonicalize(crate_dir).expect("should get cwd");
        Command::new("mkdir")
            .current_dir(&base_path)
            .arg("-p")
            .arg("examples/ffi/build")
            .output()
            .unwrap();

        let mut cmake_build_path = base_path;
        cmake_build_path.extend(vec!["examples", "ffi", "build"]);

        Command::new("cmake")
            .current_dir(&cmake_build_path)
            .arg("..")
            .arg("-DCMAKE_CASPER_CLIENT_LIB_PREBUILT:BOOL=TRUE")
            .output()
            .expect("should run cmake on examples");

        Command::new("make")
            .current_dir(&cmake_build_path)
            .output()
            .expect("should make c examples");
    }
}
